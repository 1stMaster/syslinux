                               PXELINUX
                             Version 1.46
                          September 17, 1999

    A bootloader for Linux using the PXE network booting protocol

		  Copyright (C) 1999 H. Peter Anvin

This program is provided under the terms of the GNU General Public
License, version 2 or, at your option, any later version.  There is no
warranty, neither expressed nor implied, to the function of this
program.  Please see the included file COPYING for details.

----------------------------------------------------------------------

PXELINUX is a SYSLINUX derivative, for booting Linux off a network
server, using a network ROM conforming to the Intel PXE (Pre-Execution
Environment) specification.  PXELINUX is *not* a program that is
intended to be flashed or burned into a PROM on the network card; if
you want that, check out NILO (http://www.nilo.org/).  NILO can also
be used to create a PXE-compliant boot PROM for most network cards
which have drivers for Linux or FreeBSD.


    ++++ HOW TO CONFIGURE PXELINUX ++++

PXELINUX operates in many ways like SYSLINUX.  If you are not familiar
with SYSLINUX, read syslinux.doc first, since this documentation only
explains the differences.

PXELINUX currently requires that the boot server has a TFTP server
which supports the "tsize" TFTP option (RFC 1784/RFC 2349).  The
source for such a TFTP server is available from the Netboot home page
at <http://www.han.de/~gero/netboot/english/download.html>.

On the TFTP server, create the directory "/tftpboot", and copy the
following files to it:

	pxelinux.bin		- from the SYSLINUX distribution

	any kernel or initrd images you want to boot

Finally, create the directory "/tftpboot/pxelinux.cfg".  The
configuration file (equivalent of syslinux.cfg) will live in this
directory.  Because more than one system may be booted from the same
server, the configuration file name depends on the IP address of the
booting machine.  PXELINUX will search for its config file on the boot
server in the following way:

  First, it will search for the config file using its own IP address
  in upper case hexadecimal, e.g. 192.0.2.91 -> C000025B.

  If that file is not found, it will remove one hex digit and try
  again.  For 192.0.2.91, if C000025B is not found, it will try
  C000025, C00002, C0000, C000, C00, C0, and C in that order.

  Finally, it will try looking for a file named "default" (in lower
  case).

It should be noted that all filename references are relative to the
directory pxelinux.bin lives in (usually /tftpboot).  PXELINUX
generally requires that filenames are 31 characters or shorter in
length.

PXELINUX does not support MTFTP, and I have no immediate plans of
doing so.


    ++++ SETTING UP A DHCP SERVER ++++

The PXE protocol uses a very complex set of extensions to DHCP or
BOOTP, but it seems that at least existing implementations don't
really require all of them; in fact, the only necessary option appears
to be the dhcp-class-identifier "PXEClient".

Using ISC dhcpd.conf syntax:

configuration:

        allow booting;
        allow bootp;

        filename "/tftpboot/pxelinux.bin" ;
        next-server <TFTP server>;
        option dhcp-class-identifier "PXEClient";

        option domain-name "<domain name>";
        option subnet-mask <subnet mask>;
        option broadcast-address <broadcast address>;
        option domain-name-servers <dns servers>;
        option routers <default router>;

        host <hostname> {
                hardware ethernet <ethernet address>;
                fixed-address <hostname>;
        }


The configuration above works even if the DHCP and TFTP servers are
not the same machine.

Note that if your particular TFTP daemon runs under chroot, it may be
that the filename parameter should not include the /tftpboot prefix.

I have successfully booted an Intel N440BX ("Nightshade") motherboard
with onboard Ethernet and "Intel LANDesk(R) Service Agent II version
0.99c", using ISC dhcpd 2.0.

Unfortunately, this particular version of Intel LANDesk Service Agent
II seems to have a rather serious bug: it requests the TFTP "blksize"
option, but will be mortally confused if this option is actually
accepted!  There are two possible workarounds for this bug:

1. Use a TFTP server with doesn't support "blksize".

   Unfortunately, PXELINUX requires the "tsize" option to be
   supported, and it is very unusual for TFTP servers to implement one
   and not the other.  I have therefore produced a TFTP server which
   supports options, but let them be disabled with an option (-r
   <optionname>).  This TFTP server is available at:

	http://www.kernel.org/pub/software/network/tftp/
	ftp://www.kernel.org/pub/software/network/tftp/

   ... and on any kernel.org mirror (see http://www.kernel.org/mirrors/).

2. Add the following DHCP option:

   "option vendor-encapsulated-options 08:00:00:01:7f:00:00:01 ;"

   That line is not supposed to be necessary, and in fact makes
   booting significantly slower, since it will attempt (and fail) an
   MTFTP transfer before falling back to TFTP.  For some reason, the
   boot PROM doesn't request the "blksize" option if it has already
   failed an MTFTP transfer, and thus the bug is avoided.


    ++++ SOME NOTES ++++

If the boot fails, PXELINUX (unlike SYSLINUX) will not wait forever;
rather, if it has not received any input for approximately five
minutes after displaying an error message, it will reset the machine.
This allows the machine to recover in case it had bad enough luck of
trying to boot at the same time the TFTP server goes down.


    ++++ PXELINUX IS STILL BETA ++++

PXELINUX is still very much beta; however, I'd be interested in
hearing about any experiences you might have with it, good or bad.  If
you have any comments, please use the SYSLINUX mailing list mentioned
at the end of syslinux.doc.  Thanks!

Currently known problems:

+ Requires a TFTP server which supports the "tsize" option.
+ The error recovery routine doesn't work quite right.  For right now,
  just do a hard reset.
+ There may be funnies with memory management.  The PXE spec has no
  decent way of telling it to free up all memory and unchain any
  interrupts; it allows the base stack to be unloaded, but not the
  UNDI driver.
+ There seems to be a problem with sending ACK "storms"; a number of
  ACK packets fired off without the proper delay in between.  I
  suspect this is a PXE firmware problem, rather than a PXELINUX
  problem.
+ We should probably call the UDP receive function in the keyboard
  entry loop, so that we answer ARP requests.
+ COMBOOT images or boot sectors don't work yet.
